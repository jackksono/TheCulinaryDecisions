{"version":3,"file":"static/js/423.b8d0e1f6.chunk.js","mappings":"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","sources":["../node_modules/src/observe.ts","../node_modules/src/InView.tsx","../node_modules/src/useInView.tsx","Pages/AboutMe.jsx","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === 'root'\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === 'function') {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element>();\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import React, {useState} from 'react'\nimport Mich from '../Images/Headshots/MichelleHead.jpg'\nimport Lev from '../Images/Headshots/LevanHead.jpg'\nimport Dining from '../Images/StockImages/Dining.jpg'\n\nimport { useInView } from 'react-intersection-observer';\n\nimport Fade from 'react-reveal/Fade'\n\n\nconst AboutMe = () => {\n\n\n  const zoomOptions = {\n    threshold: 0.1, // Adjust this threshold value to your desired visibility trigger point\n    triggerOnce: false, // Set to true so that the animation only happens once\n  };\n  const { ref: zoom1Ref, inView: zoom1InView } = useInView(zoomOptions);\n  const { ref: zoom2Ref, inView: zoom2InView } = useInView(zoomOptions);\n\n\n\n  \n  return (\n    <div>\n      <div className='shadow-lg -z-0'>\n        <img \n          src={Dining}\n          alt='diningPhoto'\n          className='relative object-cover w-screen sm:object-center h-[550px] sm:h-[700px] shadow-lg -z-0'\n          loading='lazy'>\n        </img>\n      </div>\n\n      <div className='justify-center pt-10 sm:grid sm:grid-cols-2 sm:gap-8 sm:p-5 xl:pt-20'>\n        <div className='flex flex-col items-center justify-center text-center group' ref={zoom1Ref}>\n            <h1 className='text-3xl font-extrabold sm:text-4xl lg:mr-40 lg:text-6xl font-Montserrat'>Levan Donato</h1>\n            <p className='text-black lg:pb-5 lg:mr-40 lg:text-2xl font-Montserrat'>Managing Partner</p>\n            <div className='relative'>\n              <Fade left when={zoom1InView}>\n                <img \n                  className='shadow-xl sm:rounded-full sm:h-[500px] w-auto lg:mr-40'\n                  alt='Headshot'\n                  src={Lev}\n                  loading='lazy'\n                />\n              </Fade>\n              <div className='justify-center duration-700 sm:shadow-2xl sm:absolute sm:opacity-0 sm:bottom-0 sm:bg-gray-200 sm:outline-none rounded-2xl sm:left-12 lg:ml-72 sm:group-hover:opacity-80'>\n                <p className='sm:m-5 m-2 mx-5 text-justify sm:text-base text-sm lg:m-0 lg:p-5 pt-5 text-black bg-transparent sm:border lg:h-auto font-semibold lg:leading-8 leading-6 lg:w-[500px] rounded-2xl sm:opacity-0 sm:group-hover:opacity-100 font-Montserrat'>\n                A first-generation American, Levan offers a diverse and unique perspective. With over 20 years' experience in luxury resort \n                operations and leadership, she has collaborated with a variety of hospitality powerhouses across the Las Vegas strip. \n                Her passion for curating new and innovative concepts led her to spearhead the opening of Resorts World Las Vegas as the Director\n                 of Beverage & Cocktails. She successfully developed strategic programs and creative concepts for over forty food and beverage \n                 venues. A hospitality professional, her expansive knowledge in new openings and business acumen has dedicated her to Culinary \n                 Decisions, where she takes immense pride in assisting others in developing effective business strategies.\n                </p>\n              </div>\n          </div>\n        </div>\n        \n        <div className='flex flex-col items-center justify-center pt-10 text-center group' ref={zoom2Ref}>\n            <h1 className='text-3xl font-extrabold sm:text-4xl lg:ml-40 lg:text-6xl font-Montserrat'>Michelle Tran</h1>\n            <p className='text-black lg:ml-40 lg:pb-5 lg:text-2xl font-Montserrat'>Managing Partner</p>\n            <div className='relative'>\n              <Fade right when={zoom2InView}>\n                <img \n                  className='shadow-xl sm:rounded-full sm:h-[500px] lg:ml-40 w-auto'\n                  alt='Headshot'\n                  src={Mich}\n                  loading='lazy'\n                />\n              </Fade>\n              <div className='justify-center pt-5 mx-5 text-sm text-justify duration-700 sm:pt-0 sm:text-base sm:shadow-2xl sm:absolute sm:opacity-0 sm:bottom-5 sm:bg-gray-200 rounded-2xl sm:right-12 lg:mr-72 sm:group-hover:opacity-80'>\n                <p className='sm:pt-5 sm:m-5 m-2 lg:m-0 lg:p-5 text-black bg-transparent sm:border lg:h-auto font-semibold lg:leading-8 leading-6 lg:w-[500px] text-sm rounded-2xl sm:opacity-0 sm:group-hover:opacity-100 font-Montserrat'> \n                  Michelle, fueled by her unwavering dedication to the hospitality industry and an impeccable knack for crafting exquisite menus, \n                  boasts an impressive track record of overseeing operations at prestigious high-volume establishments nestled along the \n                  illustrious Las Vegas Strip. Her journey has been punctuated by stints at renowned venues such as Catch Las Vegas and Resorts \n                  World Allē on 66, where her contributions earned notable recognition. Presently, she is at the helm of an ambitious venture \n                  dedicated to elevating the hospitality landscape by providing invaluable support for entrepreneurs seeking to refine and elevate \n                  their business objectives. Here, she leverages her expertise to facilitate effective operational execution while developing comprehensive training programs\n                   that emphasize consistency and financial acumen. \n\n                </p>\n              </div>\n          </div>\n        </div>\n    </div>\n    </div> \n  )\n}\n\nexport default AboutMe","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}"],"names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","optionsToId","options","Object","keys","sort","filter","key","map","concat","root","has","set","toString","get","observe","element","callback","arguments","length","undefined","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","_createObserver","id","instance","thresholds","elements","observer","entries","forEach","entry","_a","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","push","splice","indexOf","delete","unobserve","size","disconnect","React","useInView","_ref","delay","rootMargin","triggerOnce","skip","initialInView","onChange","_React2$useState","React2","_React2$useState2","_slicedToArray","ref","setRef","_React2$useState3","_React2$useState4","state","setState","current","entryTarget","previousEntryTarget","result","zoomOptions","_useInView","zoom1Ref","zoom1InView","_useInView2","zoom2Ref","zoom2InView","_jsxs","children","_jsx","className","src","Dining","alt","loading","Fade","left","when","Lev","right","Mich","_defineProperty","obj","value","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","i","source","getOwnPropertyDescriptors","defineProperties","_objectWithoutPropertiesLoose","excluded","sourceKeys"],"sourceRoot":""}